name: BuildTest
on:
  push:
    branches:
      - "feature/build-test"

jobs:
  armv7_job:
    # The host should always be Linux
    runs-on: ubuntu-18.04
    name: Build on ubuntu-18.04 armv7
    steps:
      - uses: actions/checkout@v2.1.0
          
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Set an output parameter `uname` for use in subsequent steps
#           run: |
#             apt-get update -q -y
#             apt-get install -q -y git sudo nodejs npm python
#             sudo apt-get install -q -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
            
#             npm install -g n
#             n auto
            
#             PATH="$PATH"
            
#             npm ci --unsafe-perm=true --allow-root
#             npm run build:devterm
#             cp "/packages/electron/dist" "/artifacts/${artifact_name}"
#             echo "Produced artifact at /artifacts/${artifact_name}"
#sudo apt-get install -q -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev


          install: |
            apt-get update -q -y
            apt-get install -q -y git sudo curl wget
            apt-get install -q -y libatomic1 python3.8 python build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            apt-get install -y nodejs

            
            node -v or node –version
            npm -v or npm –version
            
            echo 'Install:'
            echo $(whoami)
            echo $HOME

          run: |
            echo 'Run:'
            echo $(whoami)
            echo $HOME
            
            sudo mkdir ~/.npm
            sudo chown -R $(whoami) ~/.npm
            sudo mkdir -p /root/.cache/electron/
            sudo chown -R $(whoami) /root/.cache/
            
            
            sudo mkdir -p /root/.node-gyp/
            sudo chown -R $(whoami) /root/.node-gyp/
            
            sudo mkdir ./node_modules
            sudo chown -R $(whoami) ./node_modules
            
            sudo mkdir -p /root/.config
            sudo chown -R $(whoami) /root/.config
            mkdir ~/.npm-cache
            npm config set cache '~/.npm-cache'
            
            mkdir ~/.npm-global
            npm config set prefix '~/.npm-global'
            export PATH=~/.npm-global/bin:$PATH
            

            npm ci --quiet --no-progress

            sudo rm -rf /root/.cache
            sudo mkdir -p /root/.cache
            sudo chown -R $(whoami) /root/.cache
            sudo rm -rf /root/.config
            sudo mkdir -p /root/.config
            sudo chown -R $(whoami) /root/.config
            sudo chown -R $(whoami) ./node_modules
            
            npm run build:vue --workspace=@devterm-toolbox/electron
            npm run build:electron:devterm --workspace=@devterm-toolbox/electron  --unsafe-perm=true --allow-root
#           npm run build:devterm --workspace=@devterm-toolbox/electron --unsafe-perm=true --allow-root
#           npm run electron-build --workspace=@devterm-toolbox/electron

#            sudo chown -R $(whoami) ./node_modules
            
            
#            sudo chown -R $(whoami) ./node_modules
            
#            sudo rm -rf ./node_modules/@serialport/bindings/build         
#            sudo chmod -R 777 ./node_modules/@serialport/bindings
            
#            sudo rm -rf ./node_modules/canvas/build
#            sudo chmod -R 777 ./node_modules/canvas
            
#            sudo rm -rf ./node_modules/node-system-fonts/build
#            sudo chmod -R 777 ./node_modules/node-system-fonts
            
            
            
#            npm run electron-rebuild --workspace=@devterm-toolbox/electron
#            sudo rm -rf /root/.cache
#            sudo mkdir -p /root/.cache
#            sudo chmod -R 777 /root/.cache
            

#          sudo chown -R $(whoami) /root/.cache/
#          sudo chmod -R 777 /root/.cache/electron
# "electron-rebuild": "electron-rebuild -f -w serialport",
# "electron-build": "electron-builder install-app-deps",
            
#           electron-builder install-app-deps &&  npm run rebuild unsafe-perm=true --allow-root
            
#  --unsafe-perm=true --allow-root
#           sudo mkdir ~/.npm
#           sudo chown -R $(whoami) ~/.npm
#           sudo mkdir -p /root/.cache/electron/
#           sudo chown -R $(whoami) /root/.cache/

#           mkdir ~/.npm-cache
#           sudo chown -R $(whoami) ~/.npm-cache
#           npm config set cache ~/.npm-cache

#           mkdir ~/.npm-global
#           sudo chown -R $(whoami) ~/.npm-global
#           npm config set prefix ~/.npm-global
#           export PATH=~/.npm-global/bin:$PATH

#           sudo mkdir $HOME/node_modules
#           sudo mkdir -p $HOME/node_modules/@serialport/bindings/build
#           sudo chown -R $(whoami) $HOME/node_modules
#           sudo mkdir -p $HOME/.config
#           sudo chown -R $(whoami) $HOME/.config
#           npm ci
          
          
#           sudo mkdir $HOME/.npm
#           sudo chown -R $(whoami) $HOME/.npm
#           sudo mkdir -p $HOME/.cache/electron/
#           sudo chown -R $(whoami) $HOME/.cache/

#           sudo mkdir $HOME/node_modules
#           sudo mkdir -p $HOME/node_modules/@serialport/bindings/build
#           sudo chown -R $(whoami) $HOME/node_modules
#           sudo mkdir -p $HOME/.config
#           sudo chown -R $(whoami) $HOME/.config


#           mkdir $HOME/.npm-global
#           npm config set prefix $HOME/.npm-global
#           export PATH=$HOME/.npm-global/bin:$PATH
            
#           ls
          # --unsafe-perm=true --allow-root

#           npm ci
#             npm i serialport electron-rebuild
#             node node_modules/.bin/electron-rebuild -f -w serialport

#       sudo mkdir /tmp/.node-gyp/16.13.2
#       sudo chown -R 755 /tmp/.node-gyp/16.13.2

#       sudo mkdir /tmp/.node-gyp
#       sudo chown -R 755 /tmp/.node-gyp
#           npm -g config set unsafe-perm true
#           npm config set unsafe-perm true
#           npm -g config set user root
#           npm config set user root
#           npm config set unsafe-perm true
#           npm -g config set user root
#           npm config set user root
#           npm set-script postinstall ""
#           sudo chmod 755 /usr/bin/node
#           sudo chmod 755 /root/.npm

#           sudo mkdir /tmp/.node-gyp
#           sudo chown -R $(whoami) /tmp/.node-gyp
#           npm ci --unsafe-perm
#           source /.profile =true --allow-root
            
#           nvm use
            
            
#           sudo su - 
#           sudo -s
#           sudo nvm use
#           export HUSKY=0
            
          # sudo npm link  
          #--unsafe-perm=true --allow-root  
            
#           NODE_PATH=`which node`
#           NPM_PATH=`which npm`
#           sudo ln -s "$NODE_PATH" /usr/bin/node
#           sudo ln -s "$NPM_PATH" /usr/bin/npm
#           sudo chmod 755 /usr/bin/node
#           sudo chmod 755 /usr/bin/npm
#           sudo chmod 755 $NODE_PATH
#           sudo chmod 755 $NODE_PATH        

#   mkdir ~/.npm-global
#   npm config set prefix '~/.npm-global'
#   export PATH=~/.npm-global/bin:$PATH
            

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
#       ls -al "${PWD}/artifacts"
          
          

# jobs:
#   build_job:
#     # The host should always be linux
#     runs-on: ubuntu-18.04
#     name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

#     # Run steps on a matrix of 3 arch/distro combinations
#     strategy:
#       matrix:
#         include:
#           - arch: armv7
#             distro: ubuntu18.04

#     steps:
#       - uses: actions/checkout@v2.1.0
#       - uses: uraimo/run-on-arch-action@v2.1.1
#         name: Build artifact
#         id: build
#         with:
#           arch: ${{ matrix.arch }}
#           distro: ${{ matrix.distro }}

#           # Not required, but speeds up builds
#           githubToken: ${{ github.token }}

#           # Create an artifacts directory
#           setup: |
#             mkdir -p "${PWD}/artifacts"

#           # Mount the artifacts directory as /artifacts in the container
#           dockerRunArgs: |
#             --volume "${PWD}/artifacts:/artifacts"

#           # Pass some environment variables to the container
#           env: | # YAML, but pipe character is necessary
#             artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

#           # The shell to run commands with in the container
#           shell: /bin/sh

#           # Install some dependencies in the container. This speeds up builds if
#           # you are also using githubToken. Any dependencies installed here will
#           # be part of the container image that gets cached, so subsequent
#           # builds don't have to re-install them. The image layer is cached
#           # publicly in your project's package repository, so it is vital that
#           # no secrets are present in the container state or logs.
#           install: |
#             case "${{ matrix.distro }}" in
#               ubuntu*|jessie|stretch|buster|bullseye)
#                 apt-get update -q -y
#                 apt-get install -q -y git sudo
#                 sudo apt-get install -q -y build-essential libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev
#                 ;;
#               fedora*)
#                 dnf -y update
#                 dnf -y install git which
#                 ;;
#               alpine*)
#                 apk update
#                 apk add git
#                 ;;
#             esac

#           # Produce a binary artifact and place it in the mounted volume
#           run: |
#             npm ci
#             npm run build:devterm
#             cp "packages/electron/dist" "/artifacts/${artifact_name}"
#             echo "Produced artifact at /artifacts/${artifact_name}"

#       - name: Show the artifact
#         # Items placed in /artifacts in the container will be in
#         # ${PWD}/artifacts on the host.
#         run: |
#           ls -al "${PWD}/artifacts"
